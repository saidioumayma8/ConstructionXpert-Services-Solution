/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-25 23:04:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.taches;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import Models.Tache;
import java.util.List;

public final class Taches_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1740137840114L));
    _jspx_dependants.put("jar:file:/C:/Users/oumay/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/3.0.1/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664449878000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Models.Tache");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Admin Dashboard - ConstructionXpert</title>\r\n");
      out.write("    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-gray-50 dark:bg-gray-900 dark:text-white\">\r\n");
      out.write("\r\n");
      out.write("<!-- Sidebar -->\r\n");
      out.write("<div class=\"flex h-screen\">\r\n");
      out.write("    <aside class=\"w-64 bg-white dark:bg-gray-800 shadow-lg transform transition-transform duration-300 ease-in-out\" id=\"sidebar\">\r\n");
      out.write("        <div class=\"p-6\">\r\n");
      out.write("            <h2 class=\"text-xl font-bold text-gray-800 dark:text-gray-200\">Admin Panel</h2>\r\n");
      out.write("        </div>\r\n");
      out.write("        <nav class=\"mt-4\">\r\n");
      out.write("            <a href=\"projects\" class=\"sidebar-link\">Projects</a>\r\n");
      out.write("            <a href=\"Tasks.jsp\" class=\"sidebar-link\">Tasks</a>\r\n");
      out.write("            <a href=\"Users.jsp\" class=\"sidebar-link\">Users</a>\r\n");
      out.write("            <a href=\"Reports.jsp\" class=\"sidebar-link\">Reports</a>\r\n");
      out.write("            <a href=\"Settings.jsp\" class=\"sidebar-link\">Settings</a>\r\n");
      out.write("        </nav>\r\n");
      out.write("    </aside>\r\n");
      out.write("\r\n");
      out.write("    <!-- Main Content -->\r\n");
      out.write("    <main class=\"flex-1 p-8\">\r\n");
      out.write("        <button id=\"toggleSidebar\" class=\" px-4 py-2 rounded mb-4\">Toggle Sidebar</button>\r\n");
      out.write("\r\n");
      out.write("        <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white animate-fade-in\">All Tasks</h1>\r\n");
      out.write("        <p class=\"text-gray-600 dark:text-gray-300 mt-2\">Here is a list of all the tasks.</p>\r\n");
      out.write("\r\n");
      out.write("        ");

            List<Tache> tasks = (List<Tache>) request.getAttribute("tasks");
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <table class=\"w-full border-collapse\">\r\n");
      out.write("            <thead>\r\n");
      out.write("            <tr class=\"bg-gray-200\">\r\n");
      out.write("                <th class=\"p-3\">ID</th>\r\n");
      out.write("                <th class=\"p-3\">Description</th>\r\n");
      out.write("                <th class=\"p-3\">Start Date</th>\r\n");
      out.write("                <th class=\"p-3\">End Date</th>\r\n");
      out.write("                <th class=\"p-3\">ProjectID</th>\r\n");
      out.write("                <th class=\"p-3\">Actions</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("            ");
 if (tasks != null && !tasks.isEmpty()) { 
      out.write("\r\n");
      out.write("            ");
 for(Tache task : tasks) { 
      out.write("\r\n");
      out.write("            <tr class=\"border-b hover:bg-[#A8D5BA]/20 transition duration-300\">\r\n");
      out.write("                <td class=\"p-3\">");
      out.print( task.getId() );
      out.write("</td>\r\n");
      out.write("                <td class=\"p-3\">");
      out.print( task.getDescription() );
      out.write("</td>\r\n");
      out.write("                <td class=\"p-3\">");
      out.print( task.getDateDebut() );
      out.write("</td>\r\n");
      out.write("                <td class=\"p-3\">");
      out.print( task.getDateFin() );
      out.write("</td>\r\n");
      out.write("                <td class=\"p-3\">");
      out.print( task.getProjectId() );
      out.write("</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <!-- Edit Button -->\r\n");
      out.write("                    <a href=\"modifyTask?id=");
      out.print( task.getId );
      out.write("\" class=\"btn btn-primary\">Edit</a>\r\n");
      out.write("                    <!-- Delete Button with Confirmation -->\r\n");
      out.write("                    <a href=\"deleteTask?id=");
      out.print( task.getId() );
      out.write("\" class=\"btn btn-danger\"\r\n");
      out.write("                       onclick=\"return confirm('Are you sure you want to delete this task?');\">Delete</a>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            ");
 } else { 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"6\" class=\"p-3 text-center text-red-500\">No tasks found!</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("    </main>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Styles -->\r\n");
      out.write("<style>\r\n");
      out.write("    /* Buttons */\r\n");
      out.write("    button {\r\n");
      out.write("        position: relative;\r\n");
      out.write("        display: inline-block;\r\n");
      out.write("        margin: 15px;\r\n");
      out.write("        padding: 15px 30px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        font-size: 18px;\r\n");
      out.write("        letter-spacing: 1px;\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: #ffffff;\r\n");
      out.write("        background: transparent;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        transition: ease-out 0.5s;\r\n");
      out.write("        border: 2px solid #ff8000;\r\n");
      out.write("        border-radius: 10px;\r\n");
      out.write("        box-shadow: inset 0 0 0 0 #ff8000;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button:hover {\r\n");
      out.write("        color: white;\r\n");
      out.write("        box-shadow: inset 0 -100px 0 0 #ff8000;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button:active {\r\n");
      out.write("        transform: scale(0.9);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* Sidebar */\r\n");
      out.write("    .sidebar-link {\r\n");
      out.write("        display: block;\r\n");
      out.write("        padding: 12px;\r\n");
      out.write("        transition: transform 0.2s;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .sidebar-link:hover {\r\n");
      out.write("        background: #f3f4f6;\r\n");
      out.write("        transform: translateX(5px);\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<!-- JavaScript for Animations and Dark Mode Toggle -->\r\n");
      out.write("<script>\r\n");
      out.write("    window.onload = function () {\r\n");
      out.write("        document.getElementById(\"toggleSidebar\").addEventListener(\"click\", function () {\r\n");
      out.write("            document.getElementById(\"sidebar\").classList.toggle(\"-translate-x-64\");\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        function animateCounter(elementId, target) {\r\n");
      out.write("            let counter = { value: 0 };\r\n");
      out.write("            gsap.to(counter, {\r\n");
      out.write("                value: target,\r\n");
      out.write("                duration: 2,\r\n");
      out.write("                ease: \"power1.out\",\r\n");
      out.write("                onUpdate: function () {\r\n");
      out.write("                    let element = document.getElementById(elementId);\r\n");
      out.write("                    if (element) {\r\n");
      out.write("                        element.innerText = Math.floor(counter.value);\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        animateCounter(\"projectsCount\", 5);\r\n");
      out.write("        animateCounter(\"tasksCount\", 20);\r\n");
      out.write("        animateCounter(\"usersCount\", 15);\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
